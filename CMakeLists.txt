cmake_minimum_required(VERSION 3.0)

project(
    arturo_vm
    LANGUAGES C CXX
    )

# We require both flex and bison
find_package(FLEX REQUIRED)
find_package(BISON REQUIRED)

# The Bison spec file
set(bison_input ${CMAKE_SOURCE_DIR}/src/language.y)

# The parser header generated by Bison
set(parser_header ${CMAKE_BINARY_DIR}/parser.h)

# The output cpp from Bison
set(bison_output ${CMAKE_BINARY_DIR}/parser.cpp)

# Run Bison
add_custom_command(
    OUTPUT ${bison_output} ${parser_header}
    COMMAND ${BISON_EXECUTABLE} ${bison_input} --defines=${parser_header} -Wall --output=${bison_output}
    COMMENT "Generating parser..."
    DEPENDS ${bison_input}
    USES_TERMINAL
    )

# The Flex spec file
set(flex_input ${CMAKE_SOURCE_DIR}/src/tokens.l)

# The Flex tokenizer
set(flex_output ${CMAKE_BINARY_DIR}/tokens.cpp)

set(flex_header ${CMAKE_BINARY_DIR}/tokens.hpp)

# Run Flex
add_custom_command(
    OUTPUT ${flex_output} ${flex_header}
    COMMAND ${FLEX_EXECUTABLE} --header-file=${flex_header} -o ${flex_output} ${flex_input}
    COMMENT "Generating tokenizer..."
    DEPENDS ${parser_header} 
    USES_TERMINAL
    )

# C++ source files
set(sources
    ${CMAKE_SOURCE_DIR}/src/main.cpp
    )

# Formatting C++ sources
add_custom_target(format
    COMMAND ${CMAKE_SOURCE_DIR}/format.sh
    USES_TERMINAL
    )

add_executable(arturo_c
    ${sources}
    ${bison_output}
    ${flex_output}
    )

# Header files will be in either the build dir or in the /src
target_include_directories(arturo_c PRIVATE ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/src)

# TODO: Go to C++20
set_property(TARGET arturo_c PROPERTY CXX_STANDARD 17)

target_compile_options(arturo_c PRIVATE -Wall -Wextra -Werror -Wconversion -Wmissing-declarations)
